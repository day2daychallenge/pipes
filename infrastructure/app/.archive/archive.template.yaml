AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Pipes - Api Gateway Kinesis Firehose Pipeline

Parameters:
  Name:
    Type: String
  Stage:
    Type: String
  AdminEmail:
    Type: String
    Default: dimitri+pipes@tarasowski.de
  FallbackEmail:
    Type: String
    Default: dimitri+pipes2@tarasowski.de
  S3AlarmPeriod:
    Type: String
    Default: 60

Resources:

  DataBucket:
    Type: AWS::S3::Bucket
  
  EventStream:
    Type: AWS::Kinesis::Stream
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1

  ValidatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      ReservedConcurrentExecutions: 1 # remove when the function is safe
      Handler: index.handler 
      CodeUri: ../functions/apig-validator/
      Environment:
        Variables:
          DELIVERY_STREAM_SUCCESS:
            Ref: EventFirehose
          REGION:
            Fn::Sub: ${AWS::Region}
          NODE_ENV:
            Ref: Stage
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kinesis:GetShardIterator
                - kinesis:GetRecords
                - kinesis:DescribeStream
              Resource:
                Fn::GetAtt: [EventStream, Arn]
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kinesis:ListStreams
              Resource: "*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - firehose:PutRecord
                - firehose:PutRecordBatch
              Resource:
                Fn::GetAtt: [EventFirehose, Arn]
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream:
              Fn::GetAtt: [EventStream, Arn]
            BatchSize: 10
            StartingPosition: LATEST
    
  KinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: KinesisRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:AbortMultipartUpload
                - s3:GetBucketLocation
                - s3:GetObject
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:PutObject
              Resource:
                - Fn::GetAtt: [ DataBucket , Arn ]
                - Fn::Join:
                  - ""
                  - - Fn::GetAtt: [ DataBucket , Arn ]
                    - "/*"  
  EventFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      S3DestinationConfiguration:
        BucketARN:
          Fn::GetAtt: [ DataBucket, Arn ]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 10
        CompressionFormat: GZIP
        Prefix: "events/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/"
        ErrorOutputPrefix: "errors/!{firehose:random-string}/!{firehose:error-output-type}/!{timestamp:yyyy/MM/dd}/"
        RoleARN:
          Fn::GetAtt: [ KinesisRole, Arn ]


  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi

  ApiGatewayPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false 
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS 
        Credentials:
          Fn::GetAtt: [ GatewayRole, Arn ] 
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":kinesis:action/PutRecord" 
        IntegrationHttpMethod: POST 
        RequestTemplates:
          application/json: !Sub | 
            #set( $key = "apiKey" )
            #set( $key_ = $context.identity.apiKey )
            #set( $trace_id_val = $input.params().get("header").get("X-Amzn-Trace-Id"))#set( $bodyname = "body" )
            #set( $trace_id = "trace_id")
            #set( $received_at = "received_at")
            #set( $received_at_val = $context.requestTimeEpoch)
            #set( $body = "body")
            #set( $body_val = $input.body)
            #set( $message_id = "message_id")
            #set( $message_id_val = $context.requestId)
            #set( $quote = '"' )
            #set( $b64 = $util.base64Encode("{$quote$key$quote:$quote$key_val$quote,$quote$message_id$quote:$quote$message_id_val$quote,$quote$trace_id$quote:$quote$trace_id_val$quote,$quote$received_at$quote:$quote$received_at_val$quote,$quote$body$quote:$body_val}"))
            {
             "StreamName": "${EventStream}", 
             "PartitionKey": "$message_id_val",
             "Data": "$b64" 
            }
        RequestParameters: 
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
        IntegrationResponses:
          - StatusCode: 200 
            ResponseTemplates:
              application/json: '{"status":"OK"}'
      MethodResponses:
        - StatusCode: 200
      ResourceId:
        Fn::GetAtt: [ ApiGatewayRestApi , RootResourceId ]
      RestApiId: 
        Ref: ApiGatewayRestApi

  GatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GatewayRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - kinesis:PutRecord
                - kinesis:PutRecords
              Resource: "*"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayPostMethod
    Properties:
      RestApiId: 
        Ref: ApiGatewayRestApi
      StageName: 
        Fn::Sub: ${Stage}

  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: 
        Ref: AWS::AccountId
      DatabaseInput:
        Description: "The default database"
        Name: 
          Fn::Sub: "${Name}_${Stage}"

  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName:
        Ref: GlueDatabase
      Description: "The default crawler"
      Name: 
        Fn::Sub: "pipes-${Stage}" 
      Role:
        Fn::GetAtt: [GlueCrawlerRole, Arn]
      Schedule:
        ScheduleExpression: "cron(0 * * * ? *)" 
      Targets:
        S3Targets:
          - Path: 
              Fn::Join:
                - ""
                - - Ref: DataBucket
                  - "/events/"
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "DEPRECATE_IN_DATABASE"

  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - glue.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GlueCrawlerS3ObjectPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:GetBucketLocation
                - s3:GetBucketAcl
              Resource:
                - Fn::GetAtt: [DataBucket, Arn]
                - Fn::Join:
                    - ""
                    - - Fn::GetAtt: [DataBucket, Arn] 
                      - "/events*"
        - PolicyName: GlueCrawlerCloudWatchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup 
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/*" 
        - PolicyName: GlueCrawlerDatabasePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - "glue:*"
              Resource: "*"

  GlueConfigurationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: 
        Fn::GetAtt: [GlueConfigurationRole, Arn]
      Code:
        ZipFile: |
          const response = require("cfn-response");
          const AWS = require("aws-sdk");
          const glue = new AWS.Glue();
          exports.handler = function (event, context) {
            console.log("Request received:\n", JSON.stringify(event));
            let physicalResourceId = event.ResourceProperties.CrawlerName;
            const respond = (e) => response.send(event, context, e ? response.FAILED : response.SUCCESS, e ? e : {}, physicalResourceId);
            process.on('uncaughtException', e=>respond(e));
            try {
              let configuration = (event.RequestType === 'Create' || event.RequestType === 'Update') ?
                event.ResourceProperties.Configuration :
                {};
              if (configuration.Version) {
                configuration.Version = parseFloat(configuration.Version);
              }
              glue.updateCrawler({
                Name: physicalResourceId,
                Configuration: JSON.stringify(configuration)
              }).promise()
                .then(data=>respond())
                .catch(e=>respond(e));
            } catch (e) { respond(e); }
          };
      Timeout: 30
      Runtime: nodejs8.10

  GlueConfigurationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: GluePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'glue:UpdateCrawler'
              Resource: '*'

  CrawlerConfiguration:
    Type: Custom::CrawlerConfiguration
    Properties:
      ServiceToken: 
        Fn::GetAtt: [GlueConfigurationLambda, Arn]
      CrawlerName: 
        Ref: GlueCrawler
      Configuration:
        Version: '1.0'
        CrawlerOutput:
          Partitions:
            AddOrUpdateBehavior: InheritFromTable
Outputs:
  ApiUrl:
    Description: Url of your API endpoint
    Value:
      Fn::Join:
        - ''
        - - https://
          - Ref: ApiGatewayRestApi 
          - '.execute-api.'
          - Ref: 'AWS::Region'
          - '.amazonaws.com/'
          - Fn::Sub: ${Stage} 
  

